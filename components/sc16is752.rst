SC16IS752 UART & IO Expander
============================


.. TODO need to make a very compressed image for TOC
.. seo::
    :description: Instructions for setting up SC16IS752 I²C Component in ESPHome.
    :image: sdp31.jpg

.. role:: raw-html-m2r(raw)
   :format: html

The SC16IS752 component allows you to use SC16IS750
(`Datasheet <https://www.nxp.com/docs/en/data-sheet/SC16IS740_750_760.pdf>`__)
or SC16IS752 (`Datasheet <https://www.nxp.com/docs/en/data-sheet/SC16IS752_SC16IS762.pdf>`__)
chips or breakout-boards in ESPHome. 

The SC16IS750 is a slave I²C chip that provides a single-channel high
performance UART while the SC16IS752 provides a dual-channel UART. 
Both models offers data rates up to 5 Mbit/s. They also provides 8 additional 
programmable I/O pins. 

.. figure:: images/sc16is752-bd.png
  :align: center

The breakout-boards are easier to use and can be found
`SC16IS750 board <https://www.aliexpress.com/premium/sc16is750-board.html>`__
and `SC16IS752 board <https://www.aliexpress.com/premium/sc16is752-board.html>`__

.. note:: 
  A SC16IS750 breakout-board is equipped with a MIC5219 LG33 voltage regulator, 
  which provides 3.3V to the chip and a 14.7456MHz crystal.\ :raw-html-m2r:`<br>`
  A SC16IS752 breakout-board is equipped with a AMS1117-3.3 voltage regulator, 
  which provides 3.3V to the chip and a 3.072Mhz crystal.\ :raw-html-m2r:`<br>`

.. warning:: 
  **Due to the fact that these boards are equipped with voltage regulator they must 
  must be powered with 5v (3.3v won't work)**. \ :raw-html-m2r:`<br>`
  The level of i2c pins is 3.3V, but all pins are 5V tolerant.

.. figure:: images/sc16is752.jpg
  :align: center

  sc16is750 and sc16is752 boards

.. note:: 
  The range of possible addresses for these boards are ``0x90`` to ``0xAE``.
  The actual choice of  depends on state of the 2 address pins A0-A1. 
  Please see the table below to set the I²C device address for the boards.
  A mixture of **up to sixteen** of these boards can reside on the same I²C bus.

  Once configured, you can use any of the UART channels (2 for SC16IS752
  board) in your projects. Each channel acts for the connected components as a 
  virtual UART Bus. You can also use any of the 8 GPIO pins (pin number ``0-7``). 
  Any option accepting a :ref:`Pin Schema <config-pin_schema>` can theoretically 
  be used, but some more complicated components that do communication through 
  this I/O expander will not work.

.. list-table::
   :header-rows: 1
   :width: 300px
   :align: left

   * - I²C address
     - A1
     - A0
   * - 0x90
     - VDD
     - VDD
   * - 0x92
     - VDD
     - VSS
   * - 0x94
     - VDD
     - SCL
   * - 0x96
     - VDD
     - SCA
   * - 0x98
     - VSS
     - VDD
   * - 0x9A
     - VSS
     - VSS
   * - 0x9C
     - VSS
     - SCL
   * - 0x9E
     - VSS
     - SDA
   * - 0xA0
     - SCL
     - VDD
   * - 0xA2
     - SCL
     - VSS
   * - 0xA4
     - SCL
     - SCL
   * - 0xA6
     - SCL
     - SDA
   * - 0xA8
     - SDA
     - VDD
   * - 0xAA
     - SDA
     - VSS
   * - 0xAC
     - SDA
     - VSS
   * - 0xAE
     - SDA
     - SDA

Address table

.. code-block:: yaml

    # Example configuration entry
    sc16is752:
      - address: 0x90
        id: bridge_0
        i2c_id: i2c_bus
        model: sc16is752
        channels: 
          - uart_id: uart_0
            channel: 0
            baud_rate: 9600
            data_bits: 7
            parity: even
          - uart_id: uart_1
            channel: 1
            baud_rate: 19200

    # individual binary_sensor inputs
    binary_sensor:
      - platform: gpio
        name: "Bridge 0 Pin #0"
        pin:
          sc16is752: bridge_0
          # Use pin number 0
          number: 0
          mode:
            input: true
          inverted: true

    # Individual binary outputs
    switch:
      - platform: gpio
        name: "Bridge 0 Pin #1"
        pin:
          sc16is752: bridge_0
          # Use pin number 1
          number: 1
          mode:
            output: true
          inverted: false

    # Device using one of the sc16is752 Uart channel
    sensor:
      - platform: pmsx003
        uart_id: uart_1
        type: PMSX003
        pm_1_0:
          name: "PM <1.0µm Concentration"

Component configuration variables:
**********************************

- **id** (**Required**, :ref:`config-id`): The id to use for this SC16IS752 component.
- **address** (*Optional*, int): The I²C address of this component.
  Defaults to ``0x90``.
- **i2c_id** (*Optional*): The I²C Bus ID. Defaults to ``false`` 
- **model** (*Optional*): The board's model: ``sc16is750``, or ``sc16is752``).   Defaults to ``sc16is752``.
- **crystal** (*Optional*): The frequency in Hz of the crystal connected to the chip.
  If you are using one of the breakout-boards described above, the frequency of the crystal 
  does not need to be specified. For a sc16is750 board the crystal will be set to 14745600
  and for a sc16is752 board the crystal will be set to 3072000. If you are building your own board
  you need to specify the value of the quartz connected to the chip.
- **channels** (*Optional*): The UART Bus Channels

  - **uart_id** (**Required**, :ref:`config-id`): The id to use for this virtual UART Bus.
  - **channel** (**Required**): The channel to use for this virtual UART Bus.
    Channel must be zero for the sc16is750 and zero or one for the sc16is752. 
  - **baud_rate** (**Required**, int): The baud rate of the UART bus.
  - **data_bits** (*Optional*, int): The number of data bits used on the UART bus. Options: ``5`` to ``8``. Defaults to ``8``.
  - **parity** (*Optional*): The parity used on the UART bus. Options: ``NONE``, ``EVEN``, ``ODD``. Defaults to ``NONE``.
  - **stop_bits** (*Optional*, int): The number of stop bits to send. Options: ``1``, ``2``. Defaults to ``1``.

Pin configuration variables:
****************************

- **sc16is752** (**Required**, :ref:`config-id`): The id of the ``SC16IS752`` component of the pin.
- **number** (**Required**, int): The pin number (``0`` to ``7``)
- **inverted** (*Optional*, boolean): If all read and written values
  should be treated as inverted. Defaults to ``false``.
- **mode** (*Optional*, string): A pin mode to set for the pin at. One of ``INPUT`` or ``OUTPUT``. Default to ``INPUT``
See Also
********

- :ref:`i2c`
- :doc:`switch/gpio`
- :doc:`binary_sensor/gpio`
- `SC16IS750 datasheet <https://www.nxp.com/docs/en/data-sheet/SC16IS740_750_760.pdf>`__
- `SC16IS752 datasheet <https://www.nxp.com/docs/en/data-sheet/SC16IS752_SC16IS762.pdf>`__
- :apiref:`sc16is752/sc16is752.h`
- :ghedit:`Edit`
