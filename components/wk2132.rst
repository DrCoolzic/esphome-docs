WK2132 SPI/I²C UART Expander
============================

.. seo::
    :description: Instructions for setting up WK2132 I²C Component in ESPHome.
    :image: wk2132.jpg
    :keywords: WK2132, UART, SPI, I²C
    
.. _wk2132-component:

.. role:: raw-html-m2r(raw)
   :format: html

The ``WK2132`` SPI/I²C component allows you to connect a 
`Weika WK2332-ISSG chip. <https://jlcpcb.com/partdetail/Weikai-WK2132ISSG/C401039>`__
through a SPI or an I²C bus

It can also be used with evaluation cards equipped with this chip, such as these:

- `DFROBOT Gravity: I²C to Dual UART Module <https://www.dfrobot.com/product-2001.html>`__
- `WK2132 Chip Evaluation Board UART/SPI/IIC to 2 Serial Ports <https://www.aliexpress.com/item/1005002018579265.html>`__

.. figure:: images/DFR0627.jpg
  :align: center

The WK2132 chip/module acts as an SPI/I²C to Dual UART converter, supporting data transmission rates 
up to 1 Mbps. Each UART channel has two independent 256-byte FIFO hardware buffers for transmit and 
receive. \ :raw-html-m2r:`<br>`
It's worth noting that the baud rate and parity format of each UART channel can be configured independently. 
However, the data bit length is fixed at 8 and cannot be changed. The module supports a maximum communication 
rate of 2 Mbps.
Utilizing the UART channels enables you to connect your UART devices, with each channel functioning 
as a virtual UART bus for the connected component. \ :raw-html-m2r:`<br>`
Documentation about the DFRobot module can be found at the
`DFROBOT Wiki <https://wiki.dfrobot.com/Gravity%3A%20IIC%20to%20Dual%20UART%20Module%20SKU%3A%20DFR0627>`__

Component bus
-------------

- If you are using a `DFROBOT Gravity module, <https://www.dfrobot.com/product-2001.html>`__ 
  it can only be used via an I²C bus in which case you need to have an :ref:`I²C <i2c>` bus configured.
  
- If you are using directly a WK2132 IC or a 
  `WK2132 Evaluation Board, <https://www.aliexpress.com/item/1005002018579265.html>`__ it can 
  communicates in SPI mode and in that case you must define a :ref:`SPI bus <spi>`
  in your configuration with the **clk**, **miso_pin**, and **mosi_pin** set.

Over SPI
--------

The ``wk2132_spi`` component allows you to use the WK2132 UART expander with ESPHome using a SPI bus. 
This component establishes the connection to the WK2132 via :ref:`SPI <spi>`. You can connect several
of these modules to a SPI controller board effectively expanding the number of hardware serial ports
available.Each WK2132 module needs to be selected individually with a separate CS.

.. code-block:: yaml

    # Example of configuration entry
    spi:

    wk2132_spi:
      - id: wk2132_bridge_spi
        spi_id: spi_bus_id
        cs_pin: 5
        data_rate: 4MHz
        uart:
          - uart_id: spi_uart_0
            channel: 0
            baud_rate: 9600
            parity: even
          - uart_id: spi_uart_1
            channel: 1
            baud_rate: 19200

Configuration variables:
************************

- **id** (**Required**, :ref:`config-id`): The id to use for this WK2312 component.
- **spi_id** (*Optional*, :ref:`config-id`): Manually specify the ID of the :ref:`SPI Component <spi>` if you want
  to use multiple SPI buses.
- **cs_pin** (**Required**, :ref:`Pin Schema <config-pin_schema>`): The pin on the ESP that the chip select line
  is connected to.
- **data_rate** (*Optional*): Set the data rate of the controller. One of ``80MHz``, ``40MHz``, ``20MHz``, ``10MHz``,
  ``5MHz``, ``4MHz``, ``2MHz``, ``1MHz`` (default), ``200kHz``, ``75kHz`` or ``1kHz``. A numeric value in Hz can 
  alternatively be specified.
- **crystal** (*Optional*): The frequency in Hz of the crystal connected to the chip.
  The default value is 14745600 Hz.
- **uart** (*Required*): The UART channels.

  - **uart_id** (**Required**, :ref:`config-id`): The id to use for this UART channel.
  - **channel** (*Optional*): The channel number to use for this virtual UART. Options: 
    ``0``, ``1``. Default to ``0``. Obviously if you are using both channels they must 
    use different channel number (i.e. ``0`` and ``1``)
  - **baud_rate** (**Required**): The baud rate of the UART channel.
  - **parity** (*Optional*): The parity used on the UART channel. Options: ``NONE``, ``EVEN``, 
    ``ODD``. Defaults to ``NONE``.
  - **stop_bits** (*Optional*): The number of stop bits to send. Options: ``1``, ``2``. 
    Defaults to ``1``.

Over I²C
--------

The ``wk2132_i2c`` component allows you to use the WK2132 UART expander with ESPHome using an I²C bus. 
Up to four such modules can be connected to an I²C controller board, effectively expanding the 
available hardware serial ports to 8. The base addresses of these boards are contingent on the 
positions of two switches, A0 and A1, on the board.

..  list-table:: wk2132 address selection
    :header-rows: 1
    :width: 350px
    :align: center

    * - I²C address
      - A1
      - A0
    * - 0x10 - 0x17
      - 0
      - 0
    * - 0x30 - 0x37
      - 0
      - 1
    * - 0x50 - 0x57
      - 1
      - 0
    * - 0x70 - 0x77
      - 1
      - 1

.. important:: 

    Note that the address is given as a **range** a not a number as you usually find on other I²C component.
    Indeed due to a peculiar way of addressing the different internal registers each wk2132 component actually occupy 
    8 consecutive addresses. For example if the component base address is 0x10, it will occupy the addresses ranging from 
    0x10 to 0x17 on the I²C bus. \ :raw-html-m2r:`<br>`
    This is important to know if you want to connect other devices on the same I²C bus.

.. code-block:: yaml

    # Example of configuration entry
    wk2132_i2c:
      - address: 0x70
        id: bridge_0
        i2c_id: i2c_bus
        uart:
          - uart_id: uart_0
            channel: 0
            baud_rate: 9600
            parity: even
          - uart_id: uart_1
            channel: 1
            baud_rate: 19200

Configuration variables:
************************

- **id** (**Required**, :ref:`config-id`): The id to use for this WK2312 component.
- **address** (*Optional*): The I²C address of this component. Defaults to ``0x10``.
- **i2c_id** (*Optional*): The I²C Bus ID. Defaults to the default i²c bus.
- **crystal** (*Optional*): The frequency in Hz of the crystal connected to the chip.
  If you are using DFROBOT modules, the frequency of the crystal does not need to be specified
  as the default value is 14745600 Hz (the value of the crystal used by this board).
- **uart** (*Required*): The UART channels.

  - **uart_id** (**Required**, :ref:`config-id`): The id to use for this UART channel.
  - **channel** (*Optional*): The channel number to use for this virtual UART. Options: 
    ``0``, ``1``. Default to ``0``. Obviously if you are using both channels they must 
    use different channel number (i.e. ``0`` and ``1``)
  - **baud_rate** (**Required**): The baud rate of the UART channel.
  - **parity** (*Optional*): The parity used on the UART channel. Options: ``NONE``, ``EVEN``, 
    ``ODD``. Defaults to ``NONE``.
  - **stop_bits** (*Optional*): The number of stop bits to send. Options: ``1``, ``2``. 
    Defaults to ``1``.

Performance considerations:
---------------------------

Please be mindful that the communication between the Wk2132 device and the processor occurs on an external bus, 
with a low default operating frequency. Therefore tasks such as checking the status of the chip's 
registers or transferring bytes from the internal FIFOs to the processor may experience delays. 

To mitigate this, it is strongly recommended to increase the bus frequency. 

- With a SPI bus this can be done on the wk2132_spi component by specifying `data_rate`:

.. code-block:: yaml

    wk2132_spi:
      - id: wk2132_bridge_spi
        spi_id: spi_bus_id
        cs_pin: 5
        data_rate: 4MHz

- With an I²C bus this needs to be done on the `i2c` declaration

.. code-block:: yaml

    i2c:
      sda: 21
      scl: 22
      scan: true
      id: bus_i2c
      frequency: 600kHz

See Also
--------

- :ref:`i2c`
- :ref:`spi`
- :apiref:`wk2132/wk2132.h`
- :apiref:`wk2132_spi/wk2132_spi.h`
- :apiref:`wk2132_i2c/wk2132_i2c.h`
- :ghedit:`Edit`
